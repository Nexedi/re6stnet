#!/usr/bin/env python
import argparse, os, subprocess, sqlite3, sys, xmlrpclib
from OpenSSL import crypto
from re6st import utils

def create(path, text, mode=0666):
    fd = os.open(path, os.O_CREAT | os.O_WRONLY | os.O_EXCL, mode)
    try:
        os.write(fd, text)
    finally:
        os.close(fd)

def main():
    parser = argparse.ArgumentParser(
            description='Setup script for re6stnet')
    _ = parser.add_argument
    _('--ca-only', action='store_true',
            help='To only get CA form server')
    _('--registry', required=True,
            help='HTTP URL of the server delivering certificates')
    _('-d', '--dir', default='/etc/re6stnet',
            help='Directory where the key and certificate will be stored')
    _('-r', '--req', nargs=2, action='append',
            help='Name and value of certificate request additional arguments')
    _('--email', help='Your email address')
    _('--token', help='The token you received')
    config = parser.parse_args()
    if config.dir:
        os.chdir(config.dir)
    ca_path = 'ca.crt'
    cert_path = 'cert.crt'
    key_path = 'cert.key'
    dh_path = 'dh2048.pem'

    # Establish connection with server
    s = xmlrpclib.ServerProxy(config.registry)

    # Get CA
    ca = s.getCa()
    create(ca_path, ca)

    if config.ca_only:
        sys.exit()

    # Get token
    if not config.token:
        if not config.email:
            config.email = raw_input('Please enter your email address : ')
        _ = s.requestToken(config.email)
        config.token = raw_input('Please enter your token : ')

    # Generate key and cert request
    pkey = crypto.PKey()
    pkey.generate_key(crypto.TYPE_RSA, 2048)
    key = crypto.dump_privatekey(crypto.FILETYPE_PEM, pkey)

    req = crypto.X509Req()
    subj = req.get_subject()
    if config.req:
        for arg in config.req:
            setattr(subj, arg[0], arg[1])
    req.set_pubkey(pkey)
    req.sign(pkey, 'sha1')
    req = crypto.dump_certificate_request(crypto.FILETYPE_PEM, req)

    # Get certificate
    cert = s.requestCertificate(config.token, req)

    # Store cert and key
    create(key_path, key, 0600)
    create(cert_path, cert)

    # Generating dh file
    if not os.access(dh_path, os.F_OK):
        r = subprocess.call(('openssl', 'dhparam', '-out', dh_path, '2048'))
        if r:
            sys.exit(r)

    print "Certificate setup complete."

    cn = utils.subnetFromCert(cert_path)
    subnet = utils.networkFromCa(ca_path) + utils.binFromSubnet(cn)
    print "Your subnet: %s/%u (CN=%s)" \
        % (utils.ipFromBin(subnet), len(subnet), cn)

if __name__ == "__main__":
    main()
