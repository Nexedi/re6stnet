==========
 re6stnet
==========

---------------------------------------------
Resilient, Scalable, IPv6 Network application
---------------------------------------------

:Author: Nexedi
:Manual section: 1

SYNOPSIS
========

``re6stnet`` ``--registry`` `registry-url` ``--dh`` `dh-path` ``--ca`` `ca-path`
``--cert`` `cert-path` ``--key`` `key-path` [`options`...]
[``--`` [`openvpn-options`...]]

DESCRIPTION
===========

re6stnet is a client connecting to the re6st network. It establishes connections
with other nodes and create a resilient network, whose nodes all have ipv6
addresses. The goal of re6stnet is to create very large networks, guaranteeing
bandwidth between nodes and giving ipv6 to computers.

USAGE
=====

re6stnet needs information about certificates to start, as they contain data
about the network and the ipv6 address of the node. These certificates can be
obtained with the re6st-conf tool.

--registry address
           Complete public ( reachable from the internet ) address of the machine
           running a registry. Will be used to get the pirvate address of the
           registry and/or bootstrap peers
           Examples : http://192.0.2.42:80, http://[2001:db8:42::1]:80

--dh path
            Path to the dh file to be used by the openvpn server
            (for more information see the openvpn man page)

--ca path
            Path to the certificate authority file delivered by the re6stnet
            server. The prefix of the re6st network is included in the serial
            number of the file.

--cert path
            Path to the individual certificate file delivered by the re6stnet
            server. The prefix of the machine's re6stnet ip is included in the
            certificate's subject common name.

--key path
            Path to the private key file generated by the re6st-conf tool.

Options
-------

-h, --help  Display a summary help about the options

@file
            You can give to re6stnet a config file as a regular argument
            (meaning before giving optional openvpn arguments)
            The file should contain one option per line, possibly ommitting
            the '--'. Only long option are allowed (i.e "v 3" will not work
            while "verbose 3" will)
            You can give a file ( with the @ prefix ) as an argument within a
            file ( since it is an optioin, it must be alone on the line ).

--ip address port proto
            Specify connection information to be advertised to other nodes.
            address MUST be a ipv4 address since as of now openvpn does not
            support ipv6 addresses.
            Proto should be either udp or tcp-client

-i, ``--interface`` `interface`
            Give one interface name for each use of the argument. The interface
            will be used to detect other nodes on the local network.

--peers-db-refresh duration
            Duration in seconds of the peers DB refresh interval.
            Default : 3600  ( 1 hour )

-l, ``--log`` `directory`
            Path to the directory used for log files. Will create one file
            for babel logging and one file for each openvpn server and client
            started.
            Default : /var/log

-s, ``--state`` `directory`
            Path to the directory used for state files. State files include :
            - peers.db : the peers db used to establish connection ( created
            if does not exists )
            - re6stnet.babeld.state : babeld state file ( created if does not
            exists, overriden if exists )
            Default : /var/lib/re6stnet

-v, ``--verbose`` `level`
            Defines the verbose level, level should be an integer between 0
            and 3 ( including ). There is no precise convention for verbode
            level for now, except an increased number means more log messages.
            This parameter is also given to babel for its log.
            To adjust verbose level for openvpn, add an openvpn optional
            arguments at the end of the command line
            Default : 0

--hello duration
            Set hello interval, in seconds, for both wired and wireless
            connections. Openvpn ping-exit option is set to 4 times the hello
            interval. Argument passed down to the babel daemon, equivalent
            to :
            -h duration -H duration
            in babeld ( for more information, see babeld man page )
            It takes between 3 times and 4 times the hello interval for babel
            to re-establish connection with a node for which the direct
            connection has been cut
            Default : 15

-w, --wireless
            Consider all interfaces as being wireless interfaces. Argument
            directly passed down to the babeld daemon

--pp port proto
            Port and protocol used by the openvpn server(s). Start one openvpn
            server for each couple port/protocol specified.
            Additionally, if no external configuration is given in the command
            line, re6stnet will attempt to forward a port with upnp for each
            couple port/proto given.
            Protocols should be either udp or tcp-server.
            Default : (1194, udp), (1194, tcp-server)

--tunnel-refresh duration
            Interval in seconds between two tunnel refresh. Refreshing tunnels
            mean :
            - killing all dead tunnels ( detected via the ping-exit option
            if openvpn )
            - killing the 'worst' tunnels, so that at least the ratio of
            tunnels set by the --refresh-rate option have been killed
            - creating new tunnels to other clients randomly choosen in the
            peers database, to reach the number of connection specified by
            the connection-count option ( There can be less tunnels if the
            peers DB does not contain enough peers )
            Default : 300

--connection-count number
            The maximum number of openvpn clients to start.
            Default : 20

--refresh-rate ratio
            The ratio of connection to kill each time we refresh tunnels.
            For more information see the --tunnel-refresh option
            ratio should be a float between 0 and 1 ( included )
            Default : 0.05

Openvpn-options
---------------

-- openvpn_args
            Additional arguments to be passed down to all openvpn processes
            can be given at the end of the command line.
            In that case, insert '--' to delimit re6stnet regular options
            from the additional openvpn arguments. The list of arguments will
            be passed down to ALL openvpn processes ( including servers )
            exactly as they are given.

HOW TO
======

Here's an example how to deploy your re6st network.

Normal node
-----------

In most cases, you only have to start the re6stnet daemon for you to join
the re6st network. Since the number of options to set is currently quite high,
I advise you to utse a configuration file. Here is an example of such a
configuration file::

    # Configuration file for re6stnet
    # You have to give the complete url of the re6st-registry.
    # If you have the ip address and the port of the registry, enter the url as
    # following :
    # registry http://ipv4:port
    # registry http://[ipv6]:port
    registry http://localhost:8000

    # Here are information about your certificates.
    # These options are mandatory.
    dh dh2048.pem
    ca ca.pem
    cert cert.crt
    key cert.key

    # You can give the external configuration ( ip, port and protocol )
    # advertised to other nodes. These information are used by the openvpn
    # daemon to connect to your servers. If no --ip otion is given, re6stnet
    # will automatically attempt to forward ports vie UPnP.
    # You can give as many --ip options you want.
    #Â ip 192.0.2.130 1194 udp
    # ip 192.0.2.130 1194 tcp-client

    # You can specify the directory you want the state files ( peer database,
    # babel state file ), to be in. The default is :
    # state /var/lib/re6stnet

    # Verbose level ( default: 0 )
    # 1 is a good verbose level if you want to see what's happening in re6st.
    # level 2 and 3 display a whole lot of messages, so it should only be used 
    # as a debug tool
    verbose 1

You can then start re6stnet :

``re6stnet @command_file``


First Node
----------

First, generate the ceritifcates for your network with the following command.
For that, you have to give the address for your network, here we took an
address starting with the ipv6 example prefix `2001:db8::`, and adding a random
number to create a /48 network. Once you have decided on your network ip
address, you have to translate it into hexadecimal, and add a **1** as the
most significant digit. So the network ip address 2001:db8:42::/48 translate
into ``0x120010db80042``. Put that number as the serial umber of your
certificate.

``openssl req -nodes -new -x509 -key ca.key -set_serial 0x120010db80042
-days 365 -out ca.crt``

With this, you now have a ca.crt and a ca.key file in your current directory.
Then, you have to start a re6st-registry to acquire an ipv6 address for your
first node. In order to do that, you need to run the following command.
You can give any path you like for the --db option, if the file does not
exists, it will be created. The mailhost will be used to send tokens by mail,
so you should make sure it works.

``re6st-registry port_number --db db_path --ca path_to_ca.crt
--key path_to_ca.key --mailhost yourmailhost``

You are now ready to use the re6st configuration tool to generate the
certificates for the first node of your network, i.e. you. This should do the
trick :

``re6st-conf --server localhost --port 8000``

It will generate in your local directory (you can change it with the -d option)
four files (ca.crt, cert.crt, cert.key, dh2048.pem).

Now here's the tricky part. For your network to work, you need to restart the
registry (maybe it will be fixed one day...), this time with more information
than the last time. You need to get your hands on the individual prefix of your
node, and the re6st ipv6 address associated. These should have been printed
at the end of re6st-conf. If you have missed them, for one reason or another,
you can get them in the python interpreter::

    >>> from re6st import utils
    >>> network = utils.networkFromCa('ca.pem')
    >>> re6st_ip, prefix = utils.ipFromCert(network, 'cert.crt')
    >>> print re6st_ip
    2001:0db8:0042:0003:0000:0000:0000:0001
    >>> print prefix
    0000000000000011

Now you can restart your re6st-registry with two more options:

``re6st-registry port_number --db db_path --ca path_to_ca.crt
--key path_to_ca.key --mailhost yourmailhost --private 2001:db8:42:3::1
--bootstrap 0000000000000011``

Finally, you can start your own re6st node following the instrucxtions in the
precedent section.


SEE ALSO
========

``re6st-conf``\ (1), ``re6st-registry``\ (1), ``babeld``\ (8), ``openvpn``\ (8)
